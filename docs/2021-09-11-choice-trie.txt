notes on choice tries for checkpoint

*denotes core interface; the rest are only supported by MutableChoiceTrie

choice trie (hierarchical) -- intended for language implementation code

- * has_value(self) equiv. to what is currently called 'is_primitive'

- * get_value(self) - return value if we are a primitive; otherwise raise exception

- * get_subtrie(self, strict=False) returns the subtrie at given address; if not strict then it returns an empty choice trie (and does not mutate the choice trie)

- * __getitem__(self, adddress) returns the value at the address

- * subtries(self) returns an iterator over all (key, subtrie) pairs (empty iterator if it is primitive)

- * flatten(self) returns an iterator over all (address, value) pairs

-  asdict(self) returns a dictionary representaiton

-  set_subtrie(self, address, subtrie) sets the subtrie at the given address; always succeeds; if address=addr() then overwrites self completely.

-  __setitem__(self, address, value) sets the choice value; always succeeds

-  update(self, other) updates this choice trie using another; the other takes precedence

-  MutableChoiceTrie.copy(other) copies a choice trie

